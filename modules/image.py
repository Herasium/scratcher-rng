from PIL import Image
import requests # request img from web
import shutil # save img locally
import math
from .rank import User
def euclidean_distance(color1, color2):
    return math.sqrt(((color1[0]-color2[0]))**2 + ((color1[1]-color2[1]))**2 + ((color1[2]-color2[2]))**2)

def closest_color_index(target_color, palette):
    min_distance = float("inf")
    closest_index = None
    for i, palette_color in enumerate(palette):
        distance = euclidean_distance(target_color, palette_color)
        if distance < min_distance:
            min_distance = distance
            closest_index = i
    return closest_index

palette = [(5, 5, 0), (70, 5, 1), (150, 6, 0), (194, 6, 6), (24, 6, 66), (69, 5, 74), (150, 5, 72), (196, 6, 80), (24, 6, 140), (69, 5, 147), (150, 5, 144), (195, 6, 152), (24, 6, 212), (70, 5, 220), (148, 5, 220), (214, 5, 219), (6, 71, 1), (71, 71, 1), (150, 72, 1), (195, 71, 7), (24, 71, 66), (69, 71, 74), (149, 71, 73), (195, 71, 79), (24, 70, 140), (69, 71, 146), (150, 71, 145), (195, 71, 152), (25, 71, 213), (69, 71, 220), (148, 70, 219), (214, 71, 218), (5, 150, 1), (71, 151, 1), (149, 150, 1), (194, 150, 7), (24, 150, 67), (69, 150, 74), (149, 150, 71), (195, 151, 79), (24, 150, 140), (68, 150, 146), (150, 150, 145), (194, 150, 153), (24, 150, 213), (69, 149, 220), (147, 150, 218), (213, 150, 219), (9, 196, 1), (74, 195, 1), (152, 195, 1), (198, 195, 7), (27, 195, 67), (72, 195, 75), (153, 196, 72), (198, 195, 79), (27, 195, 139), (72, 195, 147), (153, 195, 145), (198, 195, 151), (27, 196, 214), (72, 195, 220), (150, 195, 218), (216, 195, 219), (38, 24, 1), (104, 24, 2), (183, 24, 1), (227, 24, 7), (57, 25, 66), (103, 24, 74), (183, 24, 73), (228, 24, 79), (56, 24, 140), (102, 24, 147), (183, 24, 144), (228, 24, 152), (57, 25, 213), (103, 24, 220), (180, 24, 219), (246, 24, 218), (42, 70, 1), (107, 69, 1), (186, 69, 1), (231, 69, 7), (60, 70, 67), (106, 69, 74), (186, 70, 73), (231, 69, 78), (60, 68, 140), (105, 69, 146), (187, 69, 145), (231, 69, 153), (61, 69, 213), (105, 69, 220), (184, 68, 219), (250, 69, 218), (41, 149, 0), (107, 149, 0), (186, 149, 0), (231, 149, 7), (60, 149, 67), (105, 150, 74), (186, 149, 71), (230, 149, 78), (60, 149, 140), (105, 150, 146), (186, 149, 145), (231, 150, 152), (60, 149, 212), (105, 149, 220), (184, 149, 218), (250, 149, 218), (39, 198, 3), (104, 198, 3), (183, 198, 3), (227, 198, 9), (58, 199, 71), (102, 197, 77), (182, 198, 74), (227, 198, 82), (57, 198, 142), (102, 198, 150), (183, 199, 149), (227, 198, 154), (57, 198, 216), (102, 198, 224), (180, 199, 222), (246, 198, 222), (9, 57, 33), (73, 57, 33), (153, 57, 31), (197, 58, 39), (27, 57, 101), (72, 56, 106), (152, 57, 105), (198, 57, 113), (28, 57, 173), (73, 57, 181), (153, 58, 178), (197, 56, 184), (27, 57, 246), (72, 57, 252), (151, 57, 252), (216, 57, 252), (5, 106, 37), (70, 106, 37), (150, 106, 35), (195, 106, 43), (24, 106, 103), (69, 106, 110), (149, 106, 109), (195, 106, 115), (25, 106, 177), (69, 106, 184), (150, 105, 181), (195, 106, 188), (24, 106, 248), (69, 106, 255), (148, 106, 255), (214, 106, 255), (5, 186, 37), (71, 187, 36), (150, 186, 35), (194, 186, 42), (24, 186, 103), (68, 186, 111), (149, 186, 109), (195, 187, 115), (24, 186, 177), (68, 186, 183), (149, 186, 181), (194, 186, 189), (24, 186, 249), (69, 186, 255), (148, 186, 255), (213, 185, 254), (9, 231, 35), (75, 231, 34), (152, 231, 33), (198, 231, 40), (27, 231, 100), (72, 231, 108), (153, 231, 105), (199, 231, 112), (27, 231, 173), (72, 231, 179), (152, 231, 178), (198, 231, 186), (27, 231, 245), (72, 231, 251), (150, 231, 250), (216, 231, 251), (38, 60, 4), (104, 60, 5), (183, 60, 4), (227, 60, 10), (57, 60, 69), (101, 60, 77), (183, 60, 75), (228, 60, 83), (57, 60, 143), (102, 59, 150), (183, 60, 147), (228, 60, 155), (57, 60, 214), (103, 60, 222), (181, 60, 222), (246, 59, 221), (42, 105, 1), (108, 106, 0), (186, 105, 0), (231, 105, 6), (60, 105, 66), (105, 105, 74), (186, 105, 72), (231, 106, 79), (60, 105, 140), (105, 105, 146), (186, 105, 144), (231, 105, 152), (61, 105, 213), (106, 105, 220), (184, 104, 219), (250, 105, 218), (42, 184, 2), (106, 184, 1), (186, 184, 1), (230, 184, 7), (60, 184, 67), (105, 184, 75), (186, 185, 72), (230, 184, 78), (60, 184, 140), (104, 184, 146), (186, 184, 145), (230, 184, 153), (60, 184, 213), (104, 184, 220), (184, 184, 218), (249, 184, 219), (41, 250, 0), (107, 250, 0), (186, 250, 0), (231, 249, 6), (60, 249, 67), (106, 250, 75), (185, 250, 71), (231, 249, 79), (59, 249, 139), (105, 250, 147), (186, 250, 146), (231, 249, 152), (59, 249, 213), (105, 250, 220), (183, 250, 218), (250, 250, 219)]



def resize_image(image, new_size=(16, 16)):
    return image.resize(new_size)

def save_image(image, file_path):
    image.save(file_path)

def main():
    global list
    # Open the image from URL
    image = Image.open("download.png")
    image = image.convert("RGBA")
    # Resize the image to 16x16
    resized_image = resize_image(image)

    width, height = resized_image.size

    all_pixels = []
    for x in range(width):
        for y in range(height):
            all_pixels.append(closest_color_index(resized_image.getpixel((x,y)),palette))

    return all_pixels

def download_image(url):
    file_name = "download.png"

    res = requests.get(url, stream = True)

    if res.status_code == 200:
        with open(file_name,'wb') as f:
            shutil.copyfileobj(res.raw, f)
        
def string_list(input):
    output = ""
    for data in input:
        if len(str(data)) == 3:
            output += str(data)
        else:
            output += "0"*(3-len(str(data)))
            output+=str(data)
    return output


def get_user_image(user):
    user_meta = User(user).get_meta()
    img_url = user_meta["img"]["32x32"]

    download_image(img_url)

    list = main()
    parts = string_list(list)
    n = int(len(parts) / 3)
    parts = [parts[i:i+n] for i in range(0, len(parts), n)]
    return parts
